# UID Verification Telegram Bot (Gemini OCR + MongoDB)
# Author: Aritra Mahatma

import os
import re
import logging
import requests
from PIL import Image
from io import BytesIO
from pymongo import MongoClient
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# CONFIG
BOT_TOKEN = '8019817575:AAF5XlqAzVP2p5xakApDxQTxx96UqXoH79M'
ADMIN_UID = 6490401448
GEMINI_API_KEY = 'AIzaSyAGDi2WslEe8VvBc7v3-dwpEmJobE6df1o'
MONGO_URI = 'mongodb+srv://uidchecker:uidcheckerpass@uidchecker.ujxhtkr.mongodb.net/?retryWrites=true&w=majority&appName=uidchecker'

# SETUP
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
client = MongoClient(MONGO_URI)
db = client['uidchecker']
uids_col = db['uids']
last_extractions = []

# GEMINI OCR
def gemini_ocr(image_bytes):
    import base64
    url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro-vision:generateContent?key={GEMINI_API_KEY}"
    img_base64 = base64.b64encode(image_bytes).decode('utf-8')
    data = {
        "contents": [{
            "parts": [{"inline_data": {
                "mime_type": "image/jpeg",
                "data": img_base64
            }}]
        }]
    }
    res = requests.post(url, json=data)
    if res.ok:
        try:
            return res.json()['candidates'][0]['content']['parts'][0]['text']
        except:
            return ''
    return ''

# START
def start(update: Update, context: CallbackContext):
    msg = (
        "👋 *Welcome to UID Verifier Bot!*\n\n"
        "Send your UID as text or screenshot.\n"
        "If found in DB, send wallet screenshot.\n"
        "Min balance ₹100 required for full verification."
    )
    update.message.reply_text(msg, parse_mode='Markdown')

# STATS
def stats(update: Update, context: CallbackContext):
    if update.message.from_user.id != ADMIN_UID: return
    total = uids_col.count_documents({})
    verified = uids_col.count_documents({'fully_verified': True})
    not_verified = uids_col.count_documents({'fully_verified': False})
    users = len(uids_col.distinct('user_id'))
    msg = f"📊 Stats:\n👥 Users: {users}\n📂 UIDs: {total}\n✅ Verified: {verified}\n❌ Not Verified: {not_verified}"
    update.message.reply_text(msg)

# CHECK UID
def check_uid(update, uid, user_id, username):
    found = uids_col.find_one({'uid': uid})
    if found:
        uids_col.update_one({'uid': uid}, {'$set': {'user_id': user_id, 'username': username, 'verified': True}}, upsert=True)
        update.message.reply_text("✅ UID found. Please send your wallet screenshot.")
        context = update.message.bot_data.setdefault('pending_wallets', {})
        context[user_id] = uid
    else:
        uids_col.update_one({'uid': uid}, {'$set': {'user_id': user_id, 'username': username, 'verified': False, 'fully_verified': False}}, upsert=True)
        update.message.reply_text("❌ UID not found in DB. Admin will be alerted.")
        update.message.bot.send_message(chat_id=ADMIN_UID, text=f"⚠️ UID {uid} from @{username} not found.")

# HANDLE WALLET
def handle_wallet(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    if 'pending_wallets' not in context.bot_data or user_id not in context.bot_data['pending_wallets']:
        return
    uid = context.bot_data['pending_wallets'][user_id]
    img = update.message.photo[-1].get_file()
    img_bytes = img.download_as_bytearray()
    text = gemini_ocr(img_bytes)
    balance = None
    matched_uid = None
    balance_match = re.search(r'(₹|Rs)?\\s*(\\d{2,6})', text)
    if balance_match: balance = int(balance_match.group(2))
    uid_match = re.search(r'(UID)?\\s*(\\d{6,8})', text)
    if uid_match: matched_uid = uid_match.group(2)
    if matched_uid == uid and balance and balance >= 100:
        uids_col.update_one({'uid': uid}, {'$set': {'fully_verified': True}})
        update.message.reply_text("🎉 Fully Verified!")
    else:
        update.message.reply_text("❌ Verification failed. Admin alerted.")
        context.bot.send_message(chat_id=ADMIN_UID, text=f"❌ UID {uid} wallet failed. UID matched: {matched_uid}, Balance: {balance}")
    del context.bot_data['pending_wallets'][user_id]
